/*
  Creates a base matrix for the circulant approximation of a Matérn covariance
  defined as a Kronecker sum of two AR(1) processes approximated with 
  circulant matrices.

  @param dim1 The first dimension of the grid
  @param dim2 The second dimension of the grid
  @param rho1 The correlation parameter for the first dimension
  @param rho2 The correlation parameter for the second dimension

  @return A matrix representing the base for the circulant approximation
*/
matrix make_base_matrix(int dim1, int dim2, real rho1, real rho2) {
  matrix[dim2, dim1] c = rep_matrix(0, dim2, dim1);
  vector[dim1] c1 = rep_vector(0, dim1);
  vector[dim2] c2 = rep_vector(0, dim2);

  real scale1 = 1.0 / (1.0 - square(rho1));  
  real scale2 = 1.0 / (1.0 - square(rho2));

  c1[1] = 1 + square(rho1);
  c1[2] = -rho1;
  c1[dim1] = -rho1;
  c1 *= scale1;

  c2[1] = 1 + square(rho2);
  c2[2] = -rho2;
  c2[dim2] = -rho2;
  c2 *= scale2;

  // Set the first row
  c[1, 1] = c1[1] + c2[1];  
  c[1, 2] = c1[2];
  c[1, dim1] = c1[dim1];

  // Set the rest of the first column
  c[2, 1] = c2[2];
  c[dim2, 1] = c2[dim2];
  return c;
}

/*
  Creates a base matrix and rescales its eigenvalues for the circulant approximation.
  The eigenvalues are rescaled so that the inverse of the precision matrix is
  a correlation matrix.

  The function returns the square root of the eigenvalues for use in quadratic forms.

  @param dim1 The first dimension of the grid
  @param dim2 The second dimension of the grid
  @param rho1 The correlation parameter for the first dimension
  @param rho2 The correlation parameter for the second dimension
  @param nu The smoothness parameter of the Matérn covariance

  @return A complex matrix of square roots of rescaled eigenvalues
*/
complex_matrix create_base_matrix_and_rescale_eigenvalues(int dim1, int dim2, real rho1, real rho2, int nu) {
  
  matrix[dim2, dim1] c = make_base_matrix(dim1, dim2, rho1, rho2);

  // Compute the eigenvalues and marginal standard deviation
  complex_matrix[dim2, dim1] sqrt_eigs = pow(fft2(c), (nu + 1.0) / 2.0);
  complex_matrix[dim2, dim1] inv_sqrt_eigs = pow(sqrt_eigs, -1);
  real msd = get_real(inv_fft2(inv_sqrt_eigs)[1, 1]);
  sqrt_eigs *= msd;
  
  return sqrt_eigs;
}

/*
  Performs matrix-vector multiplication in the Fourier domain.

  @param sqrt_eigs The square root of the eigenvalues
  @param v The vector to multiply

  @return The result of the matrix-vector product
*/
vector matvec_prod(complex_matrix sqrt_eigs, vector v) {
  int dim2 = rows(sqrt_eigs);
  int dim1 = cols(sqrt_eigs);
  complex_matrix[dim2, dim1] v_mat = to_matrix(v, dim2, dim1);
  
  complex_matrix[dim2, dim1] fft_v = fft2(v_mat);
  complex_matrix[dim2, dim1] prod = sqrt_eigs .* fft_v;
  complex_matrix[dim2, dim1] result_complex = inv_fft2(prod);
  
  return to_vector(get_real(result_complex));
}

/*
  Computes the log probability density of a Matérn copula that's approximated
  with a block circulant matrix with circulant blocks.

  @param Z The vector of standard normal variates
  @param sqrt_eigs The square root of the eigenvalues of the precision matrix

  @return The log probability density
*/
real matern_circulant_copula_lpdf(matrix Z, int dim1, int dim2, real rho1, real rho2, int nu) {
    int n_obs = cols(Z);
    complex_matrix[2 * dim2, 2 * dim1] eigs = create_base_matrix_and_rescale_eigenvalues(2 * dim1, 2 * dim2, rho1, rho2, nu);
    real quad_forms = 0;
    real log_det = sum(log(get_real(eigs)));
    for (i in 1:n_obs) {
      vector[4 * dim1 * dim2] Qz = matvec_prod(eigs, Z[ , i]);
      quad_forms += dot_product(Z[ , i], Qz) - dot_self(Z[ , i]);
    } 
    return - 0.5 * (quad_forms - n_obs * log_det);
  }

/*
  Computes the log probability density of a Matérn distribution that's approximated
  with a block circulant matrix with circulant blocks.

  @param X The vector of observations
  @param sqrt_eigs The square root of the eigenvalues of the precision matrix

  @return The log probability density
*/
real matern_circulant_lpdf(vector X, complex_matrix sqrt_eigs) {
  int dim1 = cols(sqrt_eigs);
  int dim2 = rows(sqrt_eigs);
  vector[dim1 * dim2] y = matvec_prod(sqrt_eigs, X);
  return - (dot_self(y) - sum(log(get_real(sqrt_eigs)))) / 2.0;
}