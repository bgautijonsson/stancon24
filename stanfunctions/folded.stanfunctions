/*
  Folds a vector representing a 2D grid into a larger vector with symmetric repetitions.
  This function is used to create a folded version of the data for the circulant approximation
  of a Matérn covariance.

  @param x The input vector representing the original 2D grid data
  @param n1 The first dimension of the original grid
  @param n2 The second dimension of the original grid

  @return A vector of length 4 * n1 * n2 containing the folded data
*/
vector fold_data(vector x, int n1, int n2) {
  vector[4 * n1 * n2] folded;
  for (i in 1:n1) {
    for (j in 1:n2) {
      int idx = (i - 1) * n2 + j;
      folded[(i - 1) * 2 * n2 + j] = x[idx];
      folded[(i - 1) * 2 * n2 + (2 * n2 - j + 1)] = x[idx];
      folded[(2 * n1 - i) * 2 * n2 + j] = x[idx];
      folded[(2 * n1 - i) * 2 * n2 + (2 * n2 - j + 1)] = x[idx];
    }
  }
  return folded;
}

/*
  Computes the log probability density of a Matérn copula that's approximated
  with a block circulant matrix with circulant blocks.

  @param Z The vector of standard normal variates
  @param sqrt_eigs The square root of the eigenvalues of the precision matrix

  @return The log probability density
*/
real matern_folded_copula_lpdf(matrix Z, int dim1, int dim2, real rho1, real rho2, int nu) {
  int n_obs = cols(Z);
  complex_matrix[2 * dim2, 2 * dim1] eigs = create_base_matrix_and_rescale_eigenvalues(2 * dim1, 2 * dim2, rho1, rho2, nu);
  real quad_forms = 0;
  real log_det = sum(log(get_real(eigs)));
  for (i in 1:n_obs) {
    vector[4 * dim1 * dim2] Z_fold = fold_data(Z[, i], dim1, dim2);
    vector[4 * dim1 * dim2] Qz = matvec_prod(eigs, Z_fold);
    quad_forms += dot_product(Z_fold, Qz) - dot_self(Z_fold);
  } 
  return - 0.5 * (quad_forms - n_obs * log_det);
}

/*
  Computes the log probability density of a Matérn copula that's approximated
  with a block circulant matrix with circulant blocks.

  @param Z The vector of standard normal variates
  @param sqrt_eigs The square root of the eigenvalues of the precision matrix

  @return The log probability density
*/
real matern_folded_copula_eigenvalues_lpdf(matrix Z, complex_matrix eigs) {
  int n_obs = cols(Z);
  int dim1 = cols(eigs);
  int dim2 = rows(eigs);
  real quad_forms = 0;
  real log_det = sum(log(get_real(eigs)));
  for (i in 1:n_obs) {
    vector[dim1 * dim2] Z_fold = fold_data(Z[, i], dim1 %/% 2, dim2 %/% 2);
    vector[dim1 * dim2] Qz = matvec_prod(eigs, Z_fold);
    quad_forms += dot_product(Z_fold, Qz) - dot_self(Z_fold);
  } 
  return - 0.5 * (quad_forms - n_obs * log_det);
}